

class Solution {
    public int shortestSubarray(int[] A, int K) {
        int len = A.length;
        int[] sum = new int[len+1];
        
        for(int i=0; i<len; i++) {
            sum[i+1] = sum[i] + A[i];
        }
        
        int res = len+1;
        Deque<Integer> stack = new ArrayDeque<>();
        
        for(int i=0; i<=len; i++) {
            while(!stack.isEmpty() && sum[i] - sum[stack.getFirst()] >= K) {
                res = Math.min(res, i-stack.pollFirst());
            }
            
            while(!stack.isEmpty() && sum[stack.getLast()] > sum[i]) {
                stack.pollLast();
            }
            
            stack.addLast(i);
        }
        
        return res == len + 1 ? -1 : res;
    }
}


Time Complexity: O(N), where NN is the length of A.

Space Complexity: O(N).
