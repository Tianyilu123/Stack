
// method 1: queue iteration

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        Queue<TreeNode> queue = new LinkedList<>();
        StringBuilder res = new StringBuilder();
        queue.offer(root);
        while(!queue.isEmpty()) {
            TreeNode cur = queue.poll();
            if(cur == null) {
                res.append("null");
            }
            else {
                res.append(cur.val);
                queue.offer(cur.left);
                queue.offer(cur.right);
            }
            res.append(",");
        }
        res.deleteCharAt(res.length()-1);
        return res.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == "") return null;
        String[] str = data.split(",");
        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode root = new TreeNode(Integer.parseInt(str[0]));
        queue.offer(root);
        for(int i=1; i<str.length; i++) {
            TreeNode parent = queue.poll();
            if(!str[i].equals("null")) {
               TreeNode left = new TreeNode(Integer.parseInt(str[i]));
                parent.left = left;
                queue.offer(left); 
            }
            if(!str[++i].equals("null")) {
               TreeNode right = new TreeNode(Integer.parseInt(str[i]));
                parent.right = right;
                queue.offer(right); 
            }
        }
        return root;
    }
}


// method 2, stack iteration

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        Stack<TreeNode> stack = new Stack<>();
        
        TreeNode cur = root;
        while(true) {
            sb.append((cur == null ? "#" : cur.val) + ",");
            
            if(cur != null) {
                stack.push(cur);
                cur = cur.left;
            } else {
                if(!stack.isEmpty()) {
                    TreeNode top = stack.pop();
                    cur = top.right;
                } else {
                    break;  
                }
            }
        }
        sb.setLength(sb.length()-1);
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() == 0) return null;
        String[] tokens = data.split(",");
        if(tokens.length == 1 && tokens[0].equals("#")) return null;
        
        Stack<TreeNode> stack = new Stack<>();
        TreeNode cur = new TreeNode(Integer.valueOf(tokens[0]));
        TreeNode root = cur;
        stack.push(cur);
        int i=1, len = tokens.length;
        
        while(i<len) {
            while(i < len && !tokens[i].equals("#")) {
                cur.left = new TreeNode(Integer.valueOf(tokens[i++]));
                cur = cur.left;
                stack.push(cur);
            }
            
            // based on the property that #(node)+1 == #(#)
            
            while(i<len && tokens[i].equals("#")) {
                i++;
                // if stack is empty, then has deserialized the full tree.
                if(stack.isEmpty()) break;
                cur = stack.pop();
            }
            
            if(i<len) {
                cur.right = new TreeNode(Integer.valueOf(tokens[i++]));
                cur = cur.right;
                stack.push(cur);
            }
        }
        return root;
    }
}

// method 3:

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        StringBuilder sb = new StringBuilder();
        preOrder(root, sb);
        
        String res = sb.toString();
        return res.substring(1);
    }
    
    private void preOrder(TreeNode root, StringBuilder sb) {
        if(root == null) {
            sb.append(",null");
            return;
        }
        
        sb.append("," + root.val);
        preOrder(root.left, sb);
        preOrder(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() == 0) return null;
        String ss[] = data.split(",");
        List<String> list = new LinkedList<>();
        for(String s : ss) 
            list.add(s);
        TreeNode root = buildTree(list);
        return root;
    }
    
    private TreeNode buildTree(List<String> ss) {
        if(ss.size() == 0) return null;
        String val = ss.get(0);
        ss.remove(0);
        if(val.equals("null"))
            return null;
        TreeNode root = new TreeNode(Integer.valueOf(val));
        root.left = buildTree(ss);
        root.right = buildTree(ss);
        return root;
    }
}


