// method 1:
class Solution {
    public boolean isValid(String s) {
        if(s ==null || s.length() == 0) return true;
        if(s != null && s.length()%2 != 0) return false;
        
        Stack<Character> stack = new Stack<>();
        for(Character ch : s.toCharArray()) {
            if(ch == '(') {
                stack.push(')');
            }
            else if(ch == '{') {
                stack.push('}');
            }
            else if(ch == '[') {
                stack.push(']');
            }
            else {
                if(stack.isEmpty() || stack.pop() != ch)
                    return false;
            }
        }
        return stack.isEmpty();
    }
}
// time: O(n)
// space: O(n)


// method 2:
class Solution {
    public boolean isValid(String s) {
        if(s != null && s.length()%2 != 0) return false;
        HashMap<Character, Character> map = new HashMap<>();
        Stack<Character> stack = new Stack<>();
        map.put(')', '(');
        map.put(']', '[');
        map.put('}', '{');
        
        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if(c == '(' || c == '[' || c == '{') {
                stack.push(c);
            } else {
                if(stack.empty()) return false;
                char top = stack.pop();
                if(top != map.get(c))
                    return false;
            }
        }
        return stack.empty();
    }
}
