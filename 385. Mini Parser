
class Solution {
    public NestedInteger deserialize(String s) {
        if(s == null || s.length() == 0) return null;
        if(s.charAt(0) != '[') return new NestedInteger(Integer.parseInt(s));
        
        int len = s.length();
        Stack<NestedInteger> stack = new Stack<>();
        
        Integer curVal = null;
        int sign = 1;
        for(int i=0; i<len; i++) {
            char c = s.charAt(i);
            
            if(c >= '0' && c<='9') {
                curVal = curVal == null ? (c-'0') : (curVal*10 + (c-'0'));
            } else if(c == '-') {
                sign *= -1;
            } else if(c == '[') {
                stack.push(new NestedInteger());
            } else if(c == ',' || c == ']') {
                if(i >= 1 && s.charAt(i-1) == '[') continue;
                else if(curVal != null) {
                    stack.push(new NestedInteger(sign * curVal));
                    curVal = null;
                    sign = 1;
                }
                
                NestedInteger top = stack.pop();
                stack.peek().add(top);
            }
        }
        
        return stack.pop();
    }
}
