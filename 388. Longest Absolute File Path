// method 1:

public class Solution {
    public int lengthLongestPath(String input) {
        if (input == null || input.length() == 0){
            return 0;
        }
        
        String[] parts = input.split("\n");
        if (parts == null || parts.length == 0) {
            return 0;
        }
        
        Stack<String> st = new Stack<String>();
        int max = 0;
        int counter = 0;
        for (int i = 0; i < parts.length; i++) {
            String s = parts[i];
            int level = getLevel(s);
            while (!st.isEmpty() && level <= st.size() - 1) {
                String out = st.pop();
                counter -= (out.length() + 1);
            }
            String removeT = s.replaceAll("\t", "");
            st.push(removeT);
            counter += removeT.length() + 1;
            if (removeT.indexOf(".") != -1) {
                max = Math.max(max, counter);
            }
        }
        
        return max == 0 ? 0 : max - 1;
    }
    
    private int getLevel(String s) {
        String temp = s.replaceAll("\t", "");
        return s.length() - temp.length();
    }
}

// method 2:
class Solution {
    public int lengthLongestPath(String input) {
        if(input == null || input.length() == 0) return 0;
        int len = input.length();
        
        int i=0, max = 0;
        Stack<int[]> stack = new Stack<>();
        
        while(i<len) {
            if(i<len && input.charAt(i) == '\n') i++;
            
            int level = 0;
            while(i<len && input.charAt(i) == '\t') {
                i++;
                level++;
            }
            
            int fileLen = 0;
            boolean isFile = false;
            while(i<len && input.charAt(i) != '\n') {
                if(input.charAt(i) == '.' && i+1 < len && 
                    (input.charAt(i+1) != '\n' || input.charAt(i+1) != '\t')) {
                    isFile = true;
                }
                fileLen++;
                i++;
            }
            while(!stack.isEmpty() && stack.peek()[1] >= level) {
                stack.pop();
            }
            
            int[] pushMe = new int[] {(stack.isEmpty() ? 
                                       0 : (stack.peek()[0] + 1)) + fileLen, level};
            stack.push(pushMe);
            
            if(isFile) {
                max = Math.max(max, pushMe[0]);
            }
        }
        
        return max;
    }
}
