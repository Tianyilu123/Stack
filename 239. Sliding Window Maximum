
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums == null || nums.length == 0) return new int[0];
        int len = nums.length;
        int[] res = new int[len-k+1];
        Deque<Integer> stack = new ArrayDeque<>();
        
        for(int i=0; i<nums.length; i++) {
            if(i >= k && stack.getFirst() == i-k) {
                stack.pollFirst();
            }
            
            while(!stack.isEmpty() && nums[stack.getLast()] <= nums[i]) {
                stack.pollLast();
            }
            
            stack.offerLast(i);
            
            if(i-k+1 >= 0) {
                res[i-k+1] = nums[stack.getFirst()];
            }
        }
        
        return res;
    }
}

// time: O(n)
// space: O(n)


// method 2:

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
    if(nums==null||nums.length==0)
        return new int[0];
 
    int[] result = new int[nums.length-k+1];
 
    LinkedList<Integer> deque = new LinkedList<Integer>();
    for(int i=0; i<nums.length; i++){
        if(!deque.isEmpty()&&deque.peekFirst()==i-k) 
            deque.poll();
 
        while(!deque.isEmpty()&&nums[deque.peekLast()]<nums[i]){
            deque.removeLast();
        }    
 
        deque.offer(i);
 
        if(i+1>=k)
            result[i+1-k]=nums[deque.peek()];
    }
 
    return result;
}
}
