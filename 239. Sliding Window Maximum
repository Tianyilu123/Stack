
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int len = nums.length;
        if(len == 0) return new int[0];
        int res[] = new int[len-k+1];
        
        Deque<Integer> que = new ArrayDeque<>();
        for(int i=0; i<len; i++) {
            if(i>=k && que.getFirst() == i-k) {
                que.pollFirst();
            }
            // same as Rectangle question, remove the useless data from the queue
            // if nums[getLast()] < nums[i], then from now on, nums[getLast()] must not be 
            // a max element. so remove it.
            
            while(!que.isEmpty() && nums[que.getLast()] <= nums[i]) {
                que.pollLast();
            }
            
            que.offerLast(i);
            
            if(i >= k-1) {
                res[i-k+1] = nums[que.getFirst()];
            }
        }
        return res;
    }
}


// method 2:

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
    if(nums==null||nums.length==0)
        return new int[0];
 
    int[] result = new int[nums.length-k+1];
 
    LinkedList<Integer> deque = new LinkedList<Integer>();
    for(int i=0; i<nums.length; i++){
        if(!deque.isEmpty()&&deque.peekFirst()==i-k) 
            deque.poll();
 
        while(!deque.isEmpty()&&nums[deque.peekLast()]<nums[i]){
            deque.removeLast();
        }    
 
        deque.offer(i);
 
        if(i+1>=k)
            result[i+1-k]=nums[deque.peek()];
    }
 
    return result;
}
}
