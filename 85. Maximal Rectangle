
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0)
            return 0;
        int row = matrix.length, col = matrix[0].length;
        int height[] = new int[col];
        int max = 0;
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(matrix[i][j] == '0') {
                    height[j] = 0;
                } else {
                    height[j]++;
                }
            }
            int area = maxSize(height);
            max = Math.max(max, area);
        }
        return max;
    }
    
    private int maxSize(int[] height) {
        int len = height.length, max = 0;
        Stack<Integer> stack = new Stack<>();
        
        for(int i=0; i<=len; i++) {
            int hei = i<len ? height[i] : 0;
            while(!stack.empty() && height[stack.peek()] > hei) {
                int top = stack.pop();
                int area = height[top] * (stack.empty() ? i:(i-stack.peek()-1));
                max = Math.max(max, area);
            }
            stack.push(i);
        }
        return max;
    }
}
