// method 1:

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        LinkedList<Integer> res = new LinkedList<>();
        if(root == null) return res;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()) {
            TreeNode cur = stack.pop();
            if(cur.left != null) stack.push(cur.left);
            if(cur.right != null) stack.push(cur.right);
            res.addFirst(cur.val);
        }
        return res;
    }
}

// time: O(h) == O(logn)
// space: O(n)


// method 2:

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        
        TreeNode prev = null;
        while(!stack.isEmpty()) {
            TreeNode cur = stack.peek();
            if(prev == null || prev.left == cur || prev.right == cur) {
                if(cur.left != null)
                    stack.push(cur.left);
                else if(cur.right != null)
                    stack.push(cur.right);
                else {
                    res.add(cur.val);
                    stack.pop();
                }
            } else if(prev == cur.left) {
                if(cur.right != null)
                    stack.push(cur.right);
                else {
                    res.add(cur.val);
                    stack.pop();
                }
            } else if(prev == cur.right) {
                res.add(cur.val);
                stack.pop();
            }
            
            prev = cur;
        }
        
        return res;
    }
}
