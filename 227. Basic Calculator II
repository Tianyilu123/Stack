// example:  -35+2*4+3/5

class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0) return 0;
        Stack<Integer> stack = new Stack<>();
        int res=0, prev=0;
        char sign = '+';
        
        for(int i=0; i<s.length(); i++) {
            char ch = s.charAt(i);
            if(Character.isDigit(ch)) {
                prev = 10*prev + (ch-'0');
            }
            if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || i == s.length()-1) {
                switch(sign) {
                    case '+': stack.push(prev); break;
                    case '-': stack.push(-prev); break;
                    case '*': stack.push(stack.pop()*prev); break;
                    case '/': stack.push(stack.pop()/prev); break;
                }
                prev = 0;
                sign = ch;
            }
        }
        
        while(!stack.isEmpty()) {
            res += stack.pop();
        }
        
        return res;
    }
}

// time: O(n)
// space: O(n)


// method 2: two stacks:

class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        Stack<Character> optr = new Stack<>();
        s = s.trim();
        
        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if(c == ' ') {
                continue;
            } else if(c == '(') {
                optr.push(c);
            } else if(c == '+' || c == '-' || c == '*' || c == '/') {
                while(!optr.empty()) {
                    if(comparePre(optr.peek(), c)) {
                        addOptrToQ(stack, String.valueOf(optr.pop()));
                    } else {
                        break;
                    }
                }
                optr.push(c);
            } else if(c>='0' && c<='9') {
                int num = 0;
                while(i<s.length() && s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                    num = num * 10 + (s.charAt(i)-'0');
                    i++;
                }
                i--;
                stack.push(num);
            } else if(c == ')') {
                while(!optr.empty() && optr.peek() != '(') {
                    addOptrToQ(stack, String.valueOf(optr.pop()));
                }
                if(!optr.empty() && optr.peek() == '(') {
                    optr.pop();
                }
            }
        }
        while(!optr.empty()) {
            addOptrToQ(stack, String.valueOf(optr.pop()));
        }
        
        return stack.peek();
    }
    
    private boolean comparePre(char c1, char c2) {
        if(c1 == '*' || c1 == '/') return true;
        else if(c1 == '(' || c2 == '*' || c2 == '/') return false;
        else return true;
    }
    
    private void addOptrToQ(Stack<Integer> stackInt, String str) {
        int opt2 = stackInt.pop();
        int opt1 = stackInt.pop();
        if(str.equals("+")) {
            stackInt.push(opt1 + opt2);
        } else if(str.equals("-")) {
            stackInt.push(opt1 - opt2);
        } else if(str.equals("*")) {
            stackInt.push(opt1 * opt2);
        } else if(str.equals("/")) {
            stackInt.push(opt1 / opt2);
        }
    }
}
