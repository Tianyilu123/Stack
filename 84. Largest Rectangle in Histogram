// method 1:

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int max = 0;
        Deque<Integer> stack = new ArrayDeque<>();
        stack.push(-1);
        int curIdx = 0;
        
        while(curIdx < n) {
            while(stack.peek() != -1 && heights[stack.peek()] >= heights[curIdx]) {
                max = Math.max(max, heights[stack.pop()] * (curIdx - stack.peek()-1));
            }
            stack.push(curIdx++);
        }
        
        while(stack.peek() != -1) {
            max = Math.max(max, heights[stack.pop()] * (n-stack.peek()-1));
        }
        
        return max;
    }
}


// Time complexity : O(n). n numbers are pushed and popped.
// Space complexity : O(n). Stack is used.


// method 2:
class Solution {
    public int largestRectangleArea(int[] heights) {
        if(heights == null || heights.length ==0) return 0;
        int max = 0;
        for(int curr = 0; curr < heights.length; curr++) {
            if(curr == heights.length-1 || heights[curr] > heights[curr+1]) {
                int minH = heights[curr];
                for(int idx = curr; idx>=0; idx--) {
                    minH = Math.min(minH, heights[idx]);
                    max = Math.max(max, minH*(curr-idx+1));
                }
            }
        }
        return max;
    }
}

// time: O(n^2)
